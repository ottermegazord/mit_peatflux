\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pysungrow.info
@settitle pysungrow Manual
@afourwide
@c %**end of header

@copying
Documentation for pysungrow version 0.1, a tool for communication with solar power devices

Copyright @copyright{} 2012, 2013 Alex Cobb
@end copying

@titlepage
@title pysungrow 0.1 Manual

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Overview, (dir), (dir)
@top pysungrow Manual

This is the documentation for @code{pysungrow} version 0.1.
@end ifnottex

@menu
* Overview::  What @code{pysungrow} is, what it does
* Installation::  Installing @code{pysungrow}
* Scripts::  The @code{sungrow} script and how to use it
* Logging with an Overo COM::  Logging data in the field
* Device-specific configuration::  Details for configuring supported devices
* Python API:: Using @code{pysungrow} from the Python command line
* Troubleshooting::  Troubleshooting
* Bugs and limitations::  Known bugs

@end menu

@node Overview, Installation, Top, Top
@chapter Overview

@cindex overview

@code{pysungrow} is is a Python library and script for interaction with power
management devices with serial interfaces.  The name comes from its
initial use with Sungrow solar power devices using their RS-485
interface, but has grown to accommodate other devices.  It can be used to:
@itemize
@item Log the status, history, or configuration of devices
@item Troubleshoot interaction with devices
@item Configure devices
@end itemize

@code{pysungrow} running on a Gumstix Overo Computer-on-Module (COM) has also been used to continually log solar power system status in the field.  If you are working with an already-existing installation, you might want to skip ahead to @ref{Logging with an Overo COM}.

@section Supported devices
The following devices are supported in this release:
@itemize
@item Sungrow SD4860 charge controller
@item Sungrow SN481KS inverter
@item OutBack FlexMax 60/80 charge controller
@item ASP Allegro TC10/48 inverter
@end itemize

@section Supported platforms
@code{pysungrow} has been tested on Linux with Python 2.7.1 and 2.6.8,
on Overo COM with Python 2.6.6 and on Windows 7 with Python 2.7.3;
earlier and later versions may work.  Unattended logging requires
@code{cron}, and therefore is not supported on Windows without some fussing.


@node Installation, Scripts, Overview, Top
@chapter Installation
On all platforms, once dependencies have been installed, installing
@code{pysungrow} is just a matter of unpacking the source distribution
and then saying, on UNIX,
@example
$ python setup.py build && su -c 'python setup.py install'
@end example
or on Windows
@example
$ python setup.py build
@end example
and then, as a user with sufficient privileges,
@example
$ python setup.py install
@end example
Once the package is installed, on most platforms typing @code{sungrow
-h} should give you a help message (except on Windows, in which case
running the script is a little more complicated; see the section
"Running the script on Windows" under Scripts, below).

@section Dependencies
@code{pysungrow} is a Python library and requires Python and two
external packages, PySerial (version >= 2.5) and PyYAML.  Pre-compiled
binaries for these packages may be available for your platform (Windows,
most Linux distributions).  PySerial is available from
@uref{http://pypi.python.org/pypi/pyserial}.  PyYAML can be installed to
use a fast C-based library, libYAML, or as a Python-only version.  To
install them, go to @uref{http://pyyaml.org/wiki/PyYAML} to get the
source and follow the instructions there; if you want libYAML, you can
get that from @uref{http://pyyaml.org/wiki/LibYAML}.

For building from source on UNIX, the following instructions may work but
could be out of date (the @code{$} indicates the command prompt; don't
type it):
@example
$ wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
$ tar -xzf yaml-0.1.4.tar.gz
$ cd yaml-0.1.4
$ ./configure && make && su -c 'make install'
@end example
and then to install PyYAML:
@example
$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz
$ tar -xzf PyYAML-3.10.tar.gz
$ cd PyYAML-3.10
$ python setup.py build && su -c 'python setup.py install'
@end example
If you have an old version of PySerial installed, first get rid of it
with
@example
$ su -c 'rm -fr /usr/lib/python2.6/site-packages/@{pyserial,serial@}*'
@end example
Then say
@example
$ wget http://pypi.python.org/packages/source/p/pyserial/pyserial-2.6.tar.gz
$ tar -xzf pyserial-2.6.tar.gz
$ cd pyserial-2.6
$ python setup.py build && su -c 'python setup.py install'
@end example

@section Installation on Windows
If you are on Windows, there may be pre-built packages available for you
on those websites.  If not, you can download the sources and install
from source (no C compiler is required for the Python packages).  You
may need something like 7-zip or Winzip to unpack the source archives
(@code{*.tar.gz}, analogous to @code{*.zip}).


@section Installation on Overo COM
Several necessary packages do not seem to be available via the
pre-configured Gumstix package feeds.  You may have better luck with the
Angstrom feeds at @uref{http://www.angstrom-distribution.org/feeds}.  If
not, all the packages here compile cleanly on the Overo COM, so
following the instructions for installation from source should work fine.
 
The standard UNIX utility @code{cron} may not be installed on your
Overo; it is needed for unattended logging.  To find out, try typing
@example
$ crontab -l
@end example
@noindent
at the Overo command prompt and you should get either your currently installed cron
jobs or "no crontab for user" If you get something like
@example
-bash: crontab: command not found
@end example
@noindent
you probably need to install cron.  Look for a package in @uref{http://www.angstrom-distribution.org/feeds/unstable/ipk/glibc/armv7a/base, the Angstrom base feed}, then download and install with
@example
$ su -c 'opkg install cron_3.0pl1-r8.6_armv7a.ipk'
@end example
@noindent
substituting the name of the package you downloaded.  Alternatively, 
you could probably build Vixie cron from source, available at
@uref{ftp://ftp.isc.org/isc/cron/cron_4.1.shar}, but I have not tried this.

@section Testing
@code{pysungrow} has a test suite to make sure the software itself is working okay.  There isn't much point in running the test suite unless you are on a new platform.  If you want to run the tests there are instructions in the README file in the distribution on how to do so; you'll need to install @code{nosetests}.

@section Hardware considerations
Sungrow devices communicate through a 3-wire @uref{http://en.wikipedia.org/wiki/RS-485, RS-485} interface. To connect a device to a computer, it's necessary to use some kind of converter.  Unfortunately, they don't all work.  Three options for the interface are:
@itemize
@item RS-232 to RS-485 converter (from built-in RS-232 port on PC)
@item USB to RS-485 converter
@item USB to RS-232 converter, RS-232 to RS-485 converter
@end itemize
USB to RS-232 converters vary because of the looseness of the RS-232 specification, and the last option has the lowest likelihood of success.

Normally, 120 ohm termination resistors are required between lines A and B at the beginning and end of the RS-485 bus.  For example, if you have a computer at one end of the bus, an inverter linked in to the middle, and a charge controller at the other end of the bus, a 120 ohm resistor should be connected between lines A and B near the RS-485 interface of the computer and another near the RS-485 interface of the charge controller.

Biasing resistors, say 750 ohms, from line A to +5 volts and from line B
to ground, may be necessary if there are unexpected zero bytes at the
beginning or end of messages.  Such zero bytes will be ignored by @code{pysungrow} if they do sneak into the output.

@image{hardware_connection, 120mm, , Hardware connection}

@node Scripts, Logging with an Overo COM, Installation, Top
@chapter Scripts
@code{pysungrow} includes a single script, @code{sungrow}. Its call signature is @code{sungrow [OPTIONS] FILE} where @code{FILE} is a system configuration file, described further in the next section.  

Options are:
@itemize
@item @code{-h}, @code{--help}: show help message
@item @code{-v}, @code{--verbose}: report more about what is being done (repeat for more verbosity, e.g., @code{sungrow -vvv})
@item @code{-l LOG_FILE}, @code{--error-log LOG_FILE}: log errors to @code{LOG_FILE}, default stderr
@item @code{-e}, @code{--emulate}: emulate configured devices until terminated, at period specified in configuration file
@end itemize

@section The configuration file
The configuration file is a document describing the system to be logged or emulated.  The same configuration file can be used for logging or emulation depending on the command-line @code{-e} or @code{--emulate} switch (port numbers may need to be changed).  The configuration is written in YAML, a human-readable data serialization language.  Its syntax is described on the @uref{http://www.yaml.org/, YAML website}, but it is straightforward enough that a few examples are usually enough to get you started.  One important thing to keep in mind is that in many contexts indentation matters, that is, it is important to match the indentation among items in the document.  Any extraneous fields in the mappings are ignored, so look out for typos!

The configuration file contains several required parameters:  the period to be used for emulation or logging, the devices to be emulated or logged, and the @code{actions} to be performed in each logging episode if run as a logging system.  If the configuration file is used for an emulation system (using @code{--emulate}), this section of the configuration is ignored and instead each configured device is configured to handle new messages on every iteration.

The @code{period} field specifies the interval between logging or emulation episodes, and consists of a value and unit, where unit may be ``h'' for hours, ``m'' for minutes or ``s'' for seconds.  For example, ``1 h'' means 1 hour, ``0.25 s'' means 0.25 seconds.

The @code{devices} field contains a mapping of device names to device
descriptions.  Each device description in turn has the fields
``device_type'', ``port'' and ``data_streams''.  The @code{device_type}
is the name of the device type according to @code{pysungrow}, and as of
this release may be one of @code{sungrow_charge_controller},
@code{sungrow_inverter}, @code{outback_charge_controller} or
@code{allegro_inverter}.  If device type name ends with
@code{_emulator}, the corresponding emulator type is created, regardless
of the @code{--emulate} command-line flag. This can be useful if you
want emulators and non-emulators to talk to eachother within a single
process (usually for debugging or configuration testing).

The @code{port} is the port descriptor, which for serial devices will
depend on your platform.  On Linux, with a USB-to-serial converter this
might be @code{/dev/ttyUSB0} (check @code{dmesg}); on Windows, try
@code{COM1} for a built-in serial port or some higher @code{COM} port
for a USB-to-serial converter (refer to Device Manager).  Any
configuration settings for the ports can be set here, using the syntax
for PySerial's @code{serial_for_url}, described in the
@uref{http://pyserial.sourceforge.net/pyserial_api.html#urls, PySerial
documentation}. Other URLs accepted by PySerial will work here too
(e.g., @code{loop://} or @code{socket://}); these are currently used
primarily for testing.  Finally (but importantly!), @code{data_streams}
is a mapping of message names to file names, indicating where you want
data to be logged.  @emph{If} @code{data_streams} @emph{is omitted for a
message type, messages of that type will not be logged}.  Therefore, at
a minimum you probably want to specify a data stream for
@code{status_page} and possibly also for @code{history_page} and
@code{configuration_page}. Specifying log files for message types that
do not exist for a particular device causes no problems, you just won't
get any output in that file.  File names may give an absolute position
in the file system, meaning that on UNIX, they may start with @code{/},
or on Windows with a drive designation such as @code{C:}.  If a file
name is relative, it is interpreted @emph{relative to the directory in
which the script is run}, so that if the script is run in your home
directory, the data files will end up in your home directory.

The @code{actions} field is a sequence of descriptors for actions to perform on each iteration.  The action descriptors have the fields ``action'', ``condition'', ``device'', and possibly other fields specifying parameters for the action.  The @code{device} field is optional; if it is omitted, the action is to be performed by the system, rather than directed to a particular device. If @code{device} is given, it must correspond exactly to one of the device names given under @code{devices}, above.  The @code{action} field is an action for the system or device, and may require parameters given as additional fields.  The @code{condition} field controls whether an action is to be performed only under certain circumstances, and may be @code{system_back_online}, meaning the action should only be performed if the system detects that it has missed an iteration, or @code{device_back_online}, meaning that the action is performed if a previously unresponsive device has become responsive again.

Actions and their parameters are:
@itemize
@item System actions:
  @itemize
  @item @code{handle_incoming_messages}: read all new messages from the bus and respond appropriately.  For an emulator, this usually means that a response will be written back to the bus; for a logger, this means the message will be logged if it is configured under @code{data_streams}.
  @item @code{sleep}: wait before performing the next action.  This may be necessary in cases where there is a delay in communication with the device; for Sungrow devices, 0.5 s should be enough. Parameters: @code{seconds}, the number of seconds to sleep.
  @end itemize
@item Device actions:
  @itemize
  @item @code{send}: send a message to the device (logger) or send a message as the device (emulator).  Parameters: @code{message_type}, which for a logger will typically be @code{status_query}, @code{history_query}, or @code{configuration_query}, although @code{history_query} and @code{configuration_query} are only defined for the Sungrow charge controller.
  @end itemize
@end itemize

Here is an example configuration file for a Sungrow charge controller and Sungrow inverter.  If @code{sungrow} is run on this file as an emulator, it will check for and respond to incoming messages on the serial device @code{/dev/ttyUSB1} every quarter-second.  If run as a logger, it will first send a @code{status_query} to the charge controller, then wait 0.5 seconds and log any responses to @code{status.csv}; then, if the system has missed a log cycle, it will send @code{history_query} to the charge controller, wait 0.5 seconds, and log any responses to @code{history.csv}.  Finally, it will send a @code{status_query} to the inverter, wait 0.5 seconds, and log any responses to @code{inverter_status.csv}.  This file is included in the source distribution as @code{doc/example_system_config.yml}.
@example
## System configuration file
period: 0.25 s
devices:
  charge_controller:
    device_type: sungrow_charge_controller
    port: /dev/ttyUSB1
    data_streams:
      status_page: status.csv
      history_page: history.csv
  inverter:
    device_type: sungrow_inverter
    port: /dev/ttyUSB1
    data_streams:
      status_page: inverter_status.csv
actions:
  - 
    action: send
    device: charge_controller
    message_type: status_query
  -
    action: sleep
    seconds: 0.5
  -
    action: handle_incoming_messages
  -
    action: send
    condition: system_back_online
    device: charge_controller
    message_type: history_query
  -
    action: sleep
    condition: system_back_online
    seconds: 0.5
  -
    action: handle_incoming_messages
    condition: system_back_online
  -
    action: send
    device: inverter
    message_type: status_query
  -
    action: sleep
    seconds: 0.5
  -
    action: handle_incoming_messages
@end example

@subsection Persistence of system state between script calls
When the script exits, the state of the system is saved in the directory
@code{~/.sungrow} (@code{~} represents your home directory) in a file
named according to a digest of the system configuration file.  Each
subsequent time the script is called, it computes the digest of the
system configuration file given on the command line, and if it has
already been called with the same file, rather than re-reading the file
@code{sungrow} will load the saved state of the system.  This allows the
script to keep track of the last time it was called and which devices
were read successfully on the previous run.  State files for emulators
and loggers are stored separately, so the state of an emulator loaded
from an actions_file will not overwrite a logger from the same action
file or vice versa.

The use of a digest to identify the configuration file means that it
@emph{does not matter if the configuration file is renamed}; it will
still be treated as the same configuration.  On the other hand, a
trivial change to the configuration file (even one that does not change
at all the function of the created system) will (with absurdly high
probability) change its MD5 digest, so it will be regarded as a new
configuration.  Under some circumstances, it might be necessary to
forget about the previous state of the script.  An easy way to do this
is to change the configuration file in some insignificant way, such as
adding a space somewhere or changing the ordering of fields.  Another
approach is to delete the state file, which is saved in
@code{~/.sungrow} as @code{logger_HASH} or @code{emulator_HASH} where
@code{HASH} is the MD5 digest of the script file.

@section Setting up for logging
To try out your logging configuration, set up the configuration file as described above, make sure the port setting is correct, and then say
@example
$ sungrow FILENAME
@end example
@noindent
where @code{FILENAME} is your system configuration file, adding verbosity flags (@code{sungrow -vvv FILENAME}) if you want to know more about what is going on.  If everything worked right, a single logging iteration will be completed, and you should get log files as configured under @code{data_streams} in your working directory if you used relative paths, or wherever in your filesystem you specified if you used absolute paths.  If you want to try a bunch more iterations of logging, you can use the capabilities of your shell; for example, on UNIX with @code{bash} you could say,
@example
$ for (( ; ; )); do sungrow -vvv system_config.yml; sleep 0.5; done
@end example

If you want to log all the time, even when your machine is restarted, see ``Log-on-startup'', below.

@section Setting up an emulator
An emulator attempts to imitate the responses of configured devices to
queries.  The physical content of the replies is nonsense, of course;
the aim is to make sure that communication is working.  When run in
emulation mode, each configured device listens on the port, and when it
receives a message it understands, it will respond with a canned reply.
To set up an emulator for use with a logger, it's usually enough to copy
the configuration file and change the port number to correspond to the
port on which you want the emulator to run, and then start the emulator
with @code{sungrow -e NEW_FILENAME}. By default, nothing will appear to
happen, but the emulator will be happily waiting on the port for
messages.  If you want to know more about what the emulator is doing,
you can add verbosity flags (e.g., @code{sungrow -vvv -e NEW_FILENAME}.

@section Setting up for log-on-startup
You can set up @code{sungrow} to run at specified intervals whenever your machine is on using the standard UNIX @code{cron} daemon.  More details can be found in the documentation for @code{cron} on your system; if you have the @code{man} command and @code{cron}'s documentation is installed, typing @code{man 5 crontab} should get you a useful manual page.  @uref{http://en.wikipedia.org/wiki/Cron, Wikipedia's entry for cron} is good for an overview.

To schedule runs of @code{sungrow}, you'll need to edit your crontab
entry using @code{crontab -e}.  This will open an editor in which you
can add a line describing when you want @code{sungrow} to run.  The
first field specifies on which minutes of the hour to run the job, the
second field which hours, and so on; an asterisk @code{*} indicates
always.  The notation @code{*/n} where n is an integer means that the
job should run every @code{n} time units, so for example
@example
*/1 * * * * cd $@{HOME@}/sungrow_data; sungrow -l errors.log system_config.yml \
   >/dev/null 2>&1
@end example
@noindent
would change to the @code{sungrow_data} subdirectory of your home
directory (this will fail if it doesn't exist!) and run the job every
minute.  (The backslash @code{\} means line continuation and is included
here to make the command fit on the page; in the crontab you can put it
all on one line.)  If you instead wanted the script to run every 10
minutes, you would enter @code{*/10} in the first column, and so on.

The shell redirection at the end of the command, @code{>/dev/null 2>&1},
indicates that you don't want any output e-mailed to you or appearing in
the system logs.  This is a good idea if you are running the job very
frequently for testing, but it also works generally provided that you
have specified @code{-e} or @code{--error-log}, because that means that
all error messages will also be sent to the specified error log file.
However, if there is an error of some other kind in the command you gave
(for example, if @code{$@{HOME@}/sungrow_data} doesn't exist), you will
get @emph{no indication at all}.  Therefore, for first tries you might
consider eliminating @code{2>&1} from the end of the command, in which
case any errors will go to your system log or be e-mailed to you
depending on how your system is configured.

To check if you just installed what you think you did, you can read the
contents of your @code{crontab} file with @code{crontab -l}.  Then wait a little while (longer than whatever interval you specified) and you should start seeing data output in the files you specified in @code{data_streams} in the configuration file, and debugging output in @code{$@{HOME@}/sungrow_data/errors.log}.

@section Running the script on Windows
Scripts will not be automatically placed in the system path and made
executable on Windows.  So instead, you may need to use
@command{sungrow.bat} --- this is a Windows batch file.  To use it, open
a command prompt (Windows menu -> All Programs -> Accessories -> Command
Prompt) and change to the directory containing @command{sungrow.bat}
using @command{cd}, e.g., @code{cd C:\Users\peater\Downloads}.  Then all
the examples listed here should work with @command{sungrow.bat}
substituted for @command{sungrow}.  Log-on-startup will not work of
course without @code{cron}.

@node Logging with an Overo COM, Device-specific configuration, Scripts, Top
@chapter Logging with an Overo COM
@section Communication with the Overo COM
Field deployments recording solar power system status with @code{pysungrow} running on an Overo COM introduce the additional step of communicating with the COM.  Instructions on communication with your Overo COM via a serial port are available in the @uref{http://gumstix.org/connect-to-my-gumstix-system.html, Gumstix online documentation}.  The essential details are that the connection is 115200 bps, 8N1, no hardware or software flow control.  You need a mini-B to standard-A USB cable and a free USB port on your computer.  Suitable terminal programs on Linux include @code{cKermit} or @code{minicom}; on Windows you can use @code{PuTTY}, available on the @url{http://www.chiark.greenend.org.uk/~sgtatham/putty/, PuTTY homepage}.

You will need to determine which COM port (on Windows) or device node (on Linux) corresponds to the serial connection.  On both Windows and Linux, a serial device often will be given the same port name on subsequent connections, but this is not guaranteed.  Therefore, to first determine the correct device name, you may need to connect to the powered-on Overo COM, then check @code{dmesg} on Linux or Device Manager on Windows.  On Windows, a quick way to open device manager is by selecting Start->Run, then typing @code{devmgmt.msc}.

Once you know the device name, you can enter this in your terminal program;  make the connection, then restart the Overo COM by pressing the reset button, and you should see its boot messages on your terminal.

In the field, you might instead connect via internet, using @code{ssh} on Linux or @code{PuTTY} on Windows.  You need to know the static IP of the Overo to do this;  in our field installations we record the static IP of the Overo on the outside of its box.  If the Overo is connected to a network running DNS, then by default you can connect to it as @code{overo.local}, but without DNS you need to know the static IP of the Overo.  If your computer does not have an internet connection either, you may need to set the IP address of the computer too.

@section Setting the clock on an Overo COM
On Overo COM, it's possible that the clock and timezone are not set correctly, especially if it is not connected to the internet.  This will make the dates for logged data misleading.  To check this, say
@example
$ date
@end example
@noindent
and see if you get something reasonable; if not, you'll need to update
the clock and possibly the timezone.  If the timezone is wrong, adjust
to Singapore time (GMT-8) with
@example
$ su -c 'rm /etc/localtime; ln /usr/share/zoneinfo/Etc/GMT-8 /etc/localtime'
$ su -c 'echo SGT > /etc/timezone'
@end example
Then to fix the date via network time protocol, say
@example
$ su -c 'rdate -s time.mit.edu'
@end example
@noindent
or, if you do not have a working network connection,
@example
$ su -c "date -s 'Fri Feb 22 08:44:00 2013'"
@end example
@noindent
or similar.  To check that your date string will be interpreted as you expect, you can try it first with
@example
$ date -d 2013-02-22T08:44
Fri Feb 22 08:44:00 SGT 2013
@end example
@noindent
or similar.

@node Device-specific configuration, Python API, Logging with an Overo COM, Top
@chapter Device-specific configuration
The devices supported by @code{sungrow} have different capabilities for recording system information, and different interfaces for communicating that information.  @code{sungrow} attempts to hide the trivial differences from the user, and present a unified interface and output format for the different devices.  However, the system configuration file needs to be modified in some ways to communicate with different devices, both to allow retrieval of information that is available from some devices but not from others, and also to provide some flexibility for interacting with similar devices that are not yet officially supported.

The Sungrow SD4860 charge controller and Sungrow SN481KS inverter have rich interfaces for interacting with a computer through a RS-485 interface.  However, these interfaces are documented exclusively in Chinese, and because my Chinese is limited, so is the coverage and translation of some of the fields in messages and replies. Help here is welcome!  However, all basic uses are covered.  The OutBack FlexMax 60/80 charge controller and ASP Allegro TC10/48 inverter have much simpler interfaces that involve periodic transmission of a status page and, in the case of the inverter, receipt of some simple commands.

Details of all message types understood by @code{sungrow} for all supported devices are documented exhaustively, if cryptically, in @code{device_types.yml} in the source distribution.  Because @code{sungrow} uses this file to interpret and compose messages, changes to this file will affect @code{sungrow}'s behaviour on subsequent builds --- so modify with care.

@section Sungrow charge controller and inverter
The Sungrow SD4860 charge controller and Sungrow SN481KS inverter both operate at 9600 bps and with otherwise default communication settings, so nothing special is required in describing the devices besides specifying the correct port settings;  see the example system configuration file in @ref{Scripts}.

Both the charge controller and inverter have sophisticated interfaces involving multiple message types.  The SD4860 charge controller understands the following message types:
@itemize
@item @code{status_query}:  Charge controller responds with information about current solar charging current, battery voltage, load current, etc.
@item @code{history_query}:  Charge controller responds with daily statistics of some state parameters:  battery voltage minimum and maximum, solar charge production, load charge consumption.
@item @code{configuration_query}:  Charge controller responds with all its current configuration parameters, such as thresholds for overvoltage and undervoltage.
@item @code{configuration_setting}:  Sets configuration of charge controller;  requires all parameters returned by a configuration query.  Not yet implemented.
@end itemize

The SN481KS inverter understands the following message types:
@itemize
@item @code{status_query}:  Inverter responds with status and configuration information including AC output voltage, current, and frequency, DC input voltage and current, undervoltage and overvoltage thresholds, machine type information and current datetime.
@item @code{inverter_start}:  Starts the inverter.  Untested.
@item @code{inverter_stop}:  Stops the inverter.  Untested.
@item @code{alarm_sound_test}:  Tests the alarm sound.  Untested.
@item @code{alarm_light_test}:  Tests the alarm light.  Untested.
@item @code{dismiss_alarm}:  Turns off the alarm.  Untested.
@item @code{set_datetime}:  Sets the datetime of the inverter.  Untested.
@item @code{test_lcd_backlight}:  Tests the LCD backlight on the inverter.  Untested.
@end itemize
Note that most of the command messages have not been tested.


@section OutBack charge controller
The FlexMax 60/80 charge controller is described on the 
@url{http://www.outbackpower.com/products/charge_controllers/flexmax/, FlexMax charge controller product page}.  It has a very simple interface, with only one message type --- the status page returned by the charge controller.  There is no status query for this charge controller because it automatically sends a status page every second when the serial communication flag RTS is set low.

What this means for the configuration file is that the only command required is @code{handle_incoming messages} with a delay (@code{sleep}) of more than 1 second.  However, the OutBack only sends messages if RTS is set low, requires DSR / DTR hardware handshaking, and baud rate needs to be set to 19200 bps.  An example configuration file is given in the next section.

@section Allegro inverter
The ASP Allegro TC10/48 inverter has a very simple interface, like the FlexMax 60/80 charge controller;  it sends status messages every 1 to 2 s, and therefore requires a delay (@code{sleep}) of about 2 s to get a message.  The product documentation is not precise regarding the syntax of the status message, but it should be interpreted correctly by the current version of @code{pysungrow}.  Communication is at 4800 bps.

The TC10/48 inverter interface also provides 3 commands, which allow changing the power level of the inverter, or disabling it entirely:
@itemize
@item @code{enable_remote}: Activate receipt of commands (necessary before issuing @code{set_standby_level}; disables the front panel potentiometer on the inverter.
@item @code{disable_remote}: Disable receipt of commands (except @code{enable_remote}; enables the front panel potentiometer on the inverter.
@item @code{set_standby_level}:  Adjust the power level of the inverter.  99 means off, 00 means continuous operation, and 01--98 set some intermediate standby level.
@end itemize

The following example system configuration file will save OutBack status messages to @code{status.csv} and Allegro inverter status messages to @code{inverter_status.csv}.
@example
## System configuration file for OutBack and Allegro
period: 1 s
devices:
  charge_controller:
    device_type: outback_charge_controller
    port: /dev/ttyUSB0
    port_settings:
      baudrate: 19200
      dsrdtr: True
    data_streams:
      status_page: status.csv
  inverter:
    device_type: allegro_inverter
    port: /dev/ttyUSB1
    port_settings:
      baudrate: 4800
    data_streams:
      status_page: inverter_status.csv
actions:
  -
    action: set_port_flag
    device: charge_controller
    flag: RTS
    level: False
  -
    action: sleep
    seconds: 2
  -
    action: handle_incoming_messages
@end example

@node Python API, Troubleshooting, Device-specific configuration, Top
@chapter Using pysungrow from the Python command line

Online help for all object can be obtained using the Python builtin
@code{help()} function; for example,
@example
>>> import sungrow.bus
>>> help(sungrow.bus.Bus)
@end example
will provide a description of the @code{Bus} class in the
@code{sungrow.bus} module.

@noindent
[Further documentation of Python API to be inserted here]

@node Troubleshooting, Bugs and limitations, Python API, Top
@chapter Troubleshooting
@code{sungrow} can be used to diagnose communication issues with devices.  Simple verification that the code is working, absent communication issues, can be done with the test suite (see @ref{Installation}).  For further troubleshooting, a first step is to call @code{sungrow -vvv CONFIG_FILE} on the command line (note all the verbosity flags) and see what is going on.  In cases where devices are completely unresponsive or responses are garbled, another good strategy is to put @code{sungrow} aside and try communicating with the device directly using a terminal program (see @ref{Logging with an Overo COM} for some suggested terminal programs).

Sungrow provides a Windows application for reading its charge
controllers
(@uref{http://peatflux.censam.org/projects/peatflux/chrome/site/images/Sungrow_monitoring_setup.rar,
installer}).  To test the sungrow charge controller emulator, connect an
RS-232 null modem cable between two serial ports on the machine, COMx
and COMy, where x and y substitute for their respective COM port
numbers.  Create a system configuration file @code{CONFIG_FILE} for an
emulator to run on COMx, then say @code{sungrow -e CONFIG_FILE} to run
an emulator in loop mode on COMx, and run the Windows software on COMy.
The Windows software should be able to show the (phony) history and
status provided by the emulator.  COMx and COMy need not be on the same
machine, that is to say, the Windows software and the emulator may run
on different computers.  For example, suppose you have two serial ports
available, @code{COM1} and @code{COM2}.  Connect these two with a null
modem serial cable.  Then start @code{sungrow} in emulation mode
listening to @code{COM1} by setting @code{port} to @code{COM1} in CONFIG_FILE, and run:
@example
sungrow -vvve CONFIG_FILE
@end example
@noindent
The emulator, in loop mode, will wait forever for a command on COM1 and
then reply.  It only replies through the port, so unless the
very-verbose flags are set (@code{-vvv}) nothing will ever appear on the
terminal, and it will look like the terminal is frozen.  Then open the
Sungrow Windows software, and set it to listen to @code{COM2}.  Its
status reports should show the canned replies of the emulator, and a
transcript of the exchange from the emulator's side should appear on the
terminal via stderr.  The script is in loop mode, so you'll have to
terminate it.

The next logical step is to test whether @code{sungrow} also successfully communicates with the @code{sungrow} emulator.  To do this, you can just copy CONFIG_FILE to a new file NEW_FILE and change @code{port} from @code{COM1} to @code{COM2}.  You'll also need to add some actions to the configuration, say a @code{status_query} followed by a @code{sleep} and @code{handle_incoming_messages} (see ``The configuration file'', above).  Then in one terminal, type:
@example
sungrow -vvve CONFIG_FILE
@end example
@noindent
Next, open another terminal and type
@example
sungrow -vvv NEW_FILE
@end example
@noindent
If all goes well, you should see a transcript of each end of the exchange on the corresponding terminal.

@node Bugs and limitations, , Troubleshooting, Top
@chapter Bugs and limitations
If you have exhausted the troubleshooting steps in this guide and your
problem has not been solved, please file a ticket on the peatflux wiki
at @uref{http://peatflux.censam.org/projects/peatflux}.

@section Known bugs and limitations
@itemize
@item @code{cron} cannot schedule logging more frequently than once per
minute.  If you want to run the script more frequently for
testing, you can use standard shell capabilities, for example, with
@code{bash},
@example for (( ; ; )); do sungrow -vvv system_config.yml; sleep 0.5; done
@end example
@noindent
will run the script every 0.5 s.
@item Log on startup: the period specified in the @code{cron} job should
match @code{period} in the system configuration file.  For logging, the
entry in the system configuration file is used to determine whether the
system has missed a logging episode, which in turn controls
@code{system_back_online}.  So if the periods in the @code{cron} job and
configuration file don't match, the @code{system_back_online} condition
will not be triggered accurately.
@end itemize

@bye

